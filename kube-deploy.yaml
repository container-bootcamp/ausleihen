---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ausleihen-config
  namespace: bibliothek
data:
  CONTAINER_BOOTCAMP_AUSLEIHEN_PORT: "80"
  CONTAINER_BOOTCAMP_EINBUCHEN_URL: "http://einbuchen-intern:80/events"
  CONTAINER_BOOTCAMP_RESERVIEREN_URL: "http://reservieren-intern:80/events"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_JDBC_URL: "jdbc:postgresql://pgpool.infrastruktur:5432/ausleihen"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_USER: "postgres"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_PASSWORD: "PpOoSsTtGgRrEeSs"


---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ausleihen-pg-init-config
  namespace: bibliothek
data:
  DB_SUPERUSER: "postgres"
  DB_SUPERUSER_PASSWORD: "PpOoSsTtGgRrEeSs"
  DB_NAME: "ausleihen"
  DB_LOCALE: "de_DE.utf-8"
  DB_HOST: "pgpool.infrastruktur"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ausleihen-pg-init-scripts-1
  namespace: bibliothek
data:
  1-ausleihen-init-db.sh: |
    #!/usr/bin/env bash

    #set -x
    set -e

    DB_LOCALE=${DB_LOCALE:?"DB_LOCALE is required"}

    DB_HOST=${DB_HOST:?"DB_HOST is required"}
    DB_SUPERUSER=${DB_SUPERUSER:?"DB_SUPERUSER is required"}
    DB_SUPERUSER_PASSWORD=${DB_SUPERUSER_PASSWORD:?"DB_SUPERUSER_PASSWORD is required"}
    DB_NAME=${DB_NAME:?"DB_NAME is required"}

    echo ${DB_HOST}":*:*:"${DB_SUPERUSER}":"${DB_SUPERUSER_PASSWORD} > ~/.pgpass
    chmod 0600 ~/.pgpass

    PG_DB_EXISTS=`psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "SELECT EXISTS ( SELECT 1 from pg_database WHERE datname='${DB_NAME}');"`
    PG_TABLE_EXISTS=`psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "SELECT EXISTS ( SELECT 1 FROM   information_schema.tables WHERE  table_schema = 'public' AND  table_name = 'journal' AND table_catalog = '${DB_NAME}');"`

    PG_COLLATION_EXISTS=`psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "SELECT EXISTS( select 1 from pg_collation);"`
    if test ${PG_COLLATION_EXISTS} = "f"; then
      psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "CREATE COLLATION IF NOT EXISTS german (LOCALE = '${DB_LOCALE}');"
    fi

    if test ${PG_DB_EXISTS} = "f"; then
      psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "CREATE DATABASE ${DB_NAME} WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = '${DB_LOCALE}' LC_CTYPE = '${DB_LOCALE}';"
    fi

    if test ${PG_TABLE_EXISTS} == "f"; then
      psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc -d ${DB_NAME}  --file=/pg-init-manuell/akka-persistence.sql
    fi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ausleihen-pg-init-scripts-2
  namespace: bibliothek
data:
  akka-persistence.sql: |
    CREATE EXTENSION IF NOT EXISTS HSTORE;

    CREATE TABLE IF NOT EXISTS journal (
       "id" BIGSERIAL NOT NULL PRIMARY KEY,
       "persistenceid" VARCHAR(254) NOT NULL,
       "sequencenr" INT NOT NULL,
       "rowid" BIGINT DEFAULT NULL,
       "deleted" BOOLEAN DEFAULT false,
       "payload" BYTEA,
       "manifest" VARCHAR(512),
       "uuid" VARCHAR(36) NOT NULL,
       "writeruuid" VARCHAR(36) NOT NULL,
       "created" timestamptz NOT NULL,
       "tags" HSTORE,
       "event" JSON,
       constraint "cc_journal_payload_event" check (payload IS NOT NULL OR event IS NOT NULL)
    );

    CREATE UNIQUE INDEX IF NOT EXISTS journal_pidseq_idx ON journal (persistenceid, sequencenr);
    CREATE UNIQUE INDEX IF NOT EXISTS journal_rowid_idx ON journal (rowid);

    CREATE TABLE IF NOT EXISTS snapshot (
       "persistenceid" VARCHAR(254) NOT NULL,
       "sequencenr" INT NOT NULL,
       "timestamp" bigint NOT NULL,
       "snapshot" BYTEA,
       "manifest" VARCHAR(512),
       "json" JSON,
       CONSTRAINT "cc_snapshot_payload_jsoin" check (snapshot IS NOT NULL OR (json IS NOT NULL AND manifest IS NOT NULL)),
       PRIMARY KEY (persistenceid, sequencenr)
    );

---

apiVersion: v1
kind: Service
metadata:
  name: ausleihen-extern
  namespace: bibliothek
spec:
  ports:
  - port: 8080
    name: web
  selector:
    app: ausleihen
    role: backend
    scs: ausleihen

---

## FÃ¼r das interne SSE Interface
apiVersion: v1
kind: Service
metadata:
  name: ausleihen-intern
  namespace: bibliothek
spec:
  ports:
  - port: 80
    name: web
  selector:
    app: ausleihen
    role: backend
    scs: ausleihen

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ausleihen
  namespace: bibliothek
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ausleihen
      role: backend
      scs: ausleihen
  template:
    metadata:
      labels:
        app: ausleihen
        role: backend
        scs: ausleihen
    spec:
      initContainers:
      - name: ausleihen-postgres-init
        image: quay.io/containerbootcamp/postgres-init
        envFrom:
        - configMapRef:
            name: ausleihen-pg-init-config
        volumeMounts:
        - name: ausleihen-init-scripts-1
          mountPath: /pg-init
        - name: ausleihen-init-scripts-2
          mountPath: /pg-init-manuell
      containers:
      - name: varnish-ssi
        image: quay.io/containerbootcamp/alpine-varnish
      - name: ausleihen
        image: quay.io/containerbootcamp/ausleihen
        envFrom:
        - configMapRef:
            name: ausleihen-config
        ports:
        - containerPort: 80
          protocol: TCP
      - name: jaeger-agent
        image: jaegertracing/jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      volumes:
      - name: ausleihen-init-scripts-1
        configMap:
          name: ausleihen-pg-init-scripts-1
      - name: ausleihen-init-scripts-2
        configMap:
          name: ausleihen-pg-init-scripts-2

---

#####
# ingress to assets, test f.e. with
# curl http://bootcamp.ch.innoq.io/ausleihen/books
#####

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
  name: ausleihen
  namespace: bibliothek
spec:
  rules:
  - host: bootcamp.ch.innoq.io
    http:
      paths:
      - path: /ausleihen
        backend:
          serviceName: ausleihen-extern
          servicePort: 8080